// This file centralizes the content of static project files
// to be included in the "Download Project" zip archive.

interface StaticFile {
    filename: string;
    content: string;
}

const SETUP_SH_CONTENT = `#!/bin/bash
echo "--- Chris' AI WORKCREW Project Setup ---"
echo ""

# Check for Node.js
if ! command -v node &> /dev/null
then
    echo "❌ Error: Node.js is not installed. Please install it to continue."
    echo "Visit https://nodejs.org/ for installation instructions."
    exit 1
fi

# Check for npm
if ! command -v npm &> /dev/null
then
    echo "❌ Error: npm is not installed. Please install it with Node.js to continue."
    exit 1
fi

echo "✅ Node.js and npm found."
echo ""

echo "⚙️  Installing project dependencies with npm..."
npm install
if [ $? -ne 0 ]; then
    echo "❌ Error: npm install failed. Please check for errors above."
    exit 1
fi

echo "✅ Dependencies installed successfully!"
echo ""
echo "--- IMPORTANT ---"
echo "This application requires a Gemini API Key."
echo "You must set it as an environment variable named API_KEY before running the app."
echo "-----------------"
echo ""
echo "🚀 Setup complete! To run the application, use the following command:"
echo ""
echo "   export API_KEY=\\"YOUR_GEMINI_API_KEY\\""
echo "   npm run dev"
echo ""
`;

const SETUP_BAT_CONTENT = `@echo off
echo --- Chris' AI WORKCREW Project Setup ---
echo.

REM Check for Node.js
where node >nul 2>nul
if %errorlevel% neq 0 (
    echo X Error: Node.js is not installed. Please install it to continue.
    echo Visit https://nodejs.org/ for installation instructions.
    goto:eof
)

REM Check for npm
where npm >nul 2>nul
if %errorlevel% neq 0 (
    echo X Error: npm is not installed. Please install it with Node.js to continue.
    goto:eof
)

echo [V] Node.js and npm found.
echo.

echo [i] Installing project dependencies with npm...
npm install
if %errorlevel% neq 0 (
    echo X Error: npm install failed. Please check for errors above.
    goto:eof
)

echo [V] Dependencies installed successfully!
echo.
echo --- IMPORTANT ---
echo This application requires a Gemini API Key.
echo You must set it as an environment variable named API_KEY before running the app.
echo -----------------
echo.
echo [!] Setup complete! To run the application, use the following commands:
echo.
echo    set API_KEY="YOUR_GEMINI_API_KEY"
echo    npm run dev
echo.
`;

export const README_CONTENT = `# Chris' AI WORKCREW - Project ASTRA

Welcome, Commander. This is the project generated by ASTRA, your advanced command interface for managing a crew of 22 specialized AI agents.

This project simulates a collaborative AI workforce, leveraging multiple AI models to achieve complex software development tasks.

## Prerequisites

- **Node.js**: Version 18.x or later (which includes npm).
- **A configured environment variable \`API_KEY\`**: This application requires a valid Gemini API key to be set in your execution environment.
- **A command-line interface** (like Terminal, Command Prompt, or PowerShell).

## 🚀 Easy Installation & Setup

This project includes setup scripts to automate the installation process.

1.  **Download and unzip the project files**.

2.  **Run the setup script for your operating system**:

    -   **For Linux or macOS**:
        Open your terminal, navigate to the project folder, and run:
        \`\`\`bash
        chmod +x setup.sh
        ./setup.sh
        \`\`\`

    -   **For Windows**:
        Open Command Prompt, navigate to the project folder, and run:
        \`\`\`bat
        setup.bat
        \`\`\`
        (You may need to grant permission if a security warning appears).

The script will check for prerequisites and install all necessary dependencies.

3.  **Run the development server**:
    After the setup is complete, follow the on-screen instructions to start the application. You will need to set your \`API_KEY\`.

    Example for Linux/macOS:
    \`\`\`bash
    export API_KEY="YOUR_GEMINI_API_KEY"
    npm run dev
    \`\`\`

    Example for Windows (Command Prompt):
    \`\`\`bat
    set API_KEY="YOUR_GEMINI_API_KEY"
    npm run dev
    \`\`\`

4.  **Open your browser** and navigate to \`http://localhost:5173\` (or the URL provided by Vite).

## Using Docker

The project comes ready to be containerized with Docker.

1.  **Build the Docker image**:
    \`\`\`bash
    docker build -t chris-ai-workcrew .
    \`\`\`

2.  **Run the Docker container**:
    This will start an Nginx server on port 80 inside the container and map it to port 8080 on your local machine.
    \`\`\`bash
    docker run -p 8080:80 chris-ai-workcrew
    \`\`\`

3.  Access the application at \`http://localhost:8080\`.
`;

export const DEPLOYMENT_CONTENT = `# Deployment Guide

This guide provides instructions for deploying your Chris' AI WORKCREW project to the web for free using popular hosting platforms like Vercel and Netlify.

These platforms are ideal for hosting static web applications (like this React project) and offer generous free tiers.

## Prerequisites

1.  **A Git Repository**: Your project should be hosted on a Git provider like GitHub, GitLab, or Bitbucket.
2.  **A Gemini API Key**: You will need your \`API_KEY\` to configure as an environment variable on the hosting platform.

---

## Option 1: Deploying with Vercel

Vercel is a platform for frontend developers, providing seamless deployment and hosting.

1.  **Sign Up**: Create a free account on [Vercel](https://vercel.com/) using your GitHub, GitLab, or Bitbucket account.

2.  **Import Project**:
    *   From your Vercel dashboard, click "Add New..." -> "Project".
    *   Select the Git repository for your Chris' AI WORKCREW project.

3.  **Configure Project**:
    *   Vercel will automatically detect that you are using Vite. The default settings should be correct:
        *   **Framework Preset**: \`Vite\`
        *   **Build Command**: \`npm run build\`
        *   **Output Directory**: \`dist\`

4.  **Add Environment Variable**:
    *   Expand the "Environment Variables" section.
    *   Add a new variable:
        *   **Name**: \`API_KEY\`
        *   **Value**: Paste your Gemini API key here.

5.  **Deploy**:
    *   Click the "Deploy" button.
    *   Vercel will build and deploy your project. Once complete, you will be provided with a public URL.

---

## Option 2: Deploying with Netlify

Netlify is another excellent platform for building, deploying, and scaling modern web applications.

1.  **Sign Up**: Create a free account on [Netlify](https://www.netlify.com/) using your GitHub, GitLab, or Bitbucket account.

2.  **Add New Site**:
    *   From your Netlify dashboard, click "Add new site" -> "Import an existing project".
    *   Connect to your Git provider and select your project's repository.

3.  **Configure Build Settings**:
    *   Netlify will likely auto-detect your settings. Verify they are correct:
        *   **Branch to deploy**: \`main\` (or your primary branch)
        *   **Build command**: \`npm run build\`
        *   **Publish directory**: \`dist\`

4.  **Add Environment Variable**:
    *   Before deploying, go to "Site settings" -> "Build & deploy" -> "Environment".
    *   Click "Edit variables" and add a new variable:
        *   **Key**: \`API_KEY\`
        *   **Value**: Paste your Gemini API key here.

5.  **Deploy Site**:
    *   Go back to the "Deploys" tab and trigger a new deploy, or simply click the "Deploy site" button during the initial setup.
    *   Netlify will build and deploy your site, providing you with a live URL.
`;

const packageJsonContent = `{
  "name": "chris-ai-workcrew-project",
  "private": true,
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "@types/react": "^18.2.43",
    "@types/react-dom": "^18.2.17",
    "@vitejs/plugin-react": "^4.2.1",
    "autoprefixer": "^10.4.17",
    "postcss": "^8.4.35",
    "tailwindcss": "^3.4.1",
    "typescript": "^5.2.2",
    "vite": "^5.0.8"
  }
}`;

const viteConfigContent = `import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
})`

const tsconfigJsonContent = `{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"],
  "references": [{ "path": "./tsconfig.node.json" }]
}`;

const tsconfigNodeJsonContent = `{
  "compilerOptions": {
    "composite": true,
    "skipLibCheck": true,
    "module": "ESNext",
    "moduleResolution": "bundler",
    "allowSyntheticDefaultImports": true,
    "strict": true
  },
  "include": ["vite.config.ts"]
}`;

const tailwindConfigContent = `/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}`;

const postcssConfigContent = `export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}`;

const indexHtmlContent = `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Chris' AI WORKCREW Project</title>
    <style>
      /* You can add global styles here */
      body {
        margin: 0;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
          'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
          sans-serif;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
      }
    </style>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/index.tsx"></script>
  </body>
</html>`;

const dockerfileContent = `# Stage 1: Build the React application
FROM node:20-alpine AS build

WORKDIR /app

# Copy package.json and package-lock.json for dependency installation
COPY package*.json ./
RUN npm install

# Copy the rest of the application source code
COPY . .

# Build the application
RUN npm run build

# Stage 2: Serve the application using Nginx
FROM nginx:stable-alpine

# Copy the build output from the build stage
COPY --from=build /app/dist /usr/share/nginx/html

# Copy the custom Nginx configuration
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Expose port 80
EXPOSE 80

# Start Nginx when the container launches
CMD ["nginx", "-g", "daemon off;"]`;

const dockerignoreContent = `# Dependencies
node_modules

# Build output
dist
build

# Logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Vite local development files
.vite

# Environment variables
.env*

# OS-specific files
.DS_Store
Thumbs.db`;

const nginxConfContent = `server {
  listen 80;

  root /usr/share/nginx/html;

  index index.html;

  location / {
    try_files $uri $uri/ /index.html;
  }
}`;

export const STATIC_PROJECT_FILES: StaticFile[] = [
    { filename: 'package.json', content: packageJsonContent },
    { filename: 'vite.config.ts', content: viteConfigContent },
    { filename: 'tsconfig.json', content: tsconfigJsonContent },
    { filename: 'tsconfig.node.json', content: tsconfigNodeJsonContent },
    { filename: 'tailwind.config.js', content: tailwindConfigContent },
    { filename: 'postcss.config.js', content: postcssConfigContent },
    { filename: 'index.html', content: indexHtmlContent },
    { filename: 'Dockerfile', content: dockerfileContent },
    { filename: '.dockerignore', content: dockerignoreContent },
    { filename: 'nginx.conf', content: nginxConfContent },
    { filename: 'README.md', content: README_CONTENT },
    { filename: 'DEPLOYMENT.md', content: DEPLOYMENT_CONTENT },
    { filename: 'setup.sh', content: SETUP_SH_CONTENT },
    { filename: 'setup.bat', content: SETUP_BAT_CONTENT },
];