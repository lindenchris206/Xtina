#!/usr/bin/env bash
set -euo pipefail

# build_deb.sh
# Creates a simple .deb for Christina Mini and packages the app under /opt/christina-mini
#
# Usage:
#   1) Edit variables below to point to your local source or a git URL.
#   2) Run: ./build_deb.sh
#   3) Install resulting package in dist/: sudo dpkg -i dist/christina-mini_1.0.0_all.deb

# === Configuration - edit as needed ===
REPO_PATH=""         # If you already cloned source locally, set this (e.g. /home/user/christina-mini)
REPO_URL="https://github.com/your-user/christina-mini.git"  # fallback clone URL if REPO_PATH empty
APP_NAME="christina-mini"
PACKAGE_NAME="christina-mini"
VERSION="1.0.0"
MAINTAINER="Your Name <you@example.com>"
DESCRIPTION="Christina Mini - local assistant (packaged installer)"
INSTALL_PREFIX="/opt/${APP_NAME}"
SERVICE_NAME="${APP_NAME}.service"
NODE_VERSION_SETUP_URL="https://deb.nodesource.com/setup_20.x"
DIST_DIR="$(pwd)/dist"
BUILD_DIR="$(pwd)/build_pkg"
DEBIAN_DIR="${BUILD_DIR}/DEBIAN"
FILES_DIR="${BUILD_DIR}${INSTALL_PREFIX}"
SYSTEMD_DIR="${BUILD_DIR}/lib/systemd/system"

# === End configuration ===

echo "Preparing build environment..."
rm -rf "$BUILD_DIR" "$DIST_DIR"
mkdir -p "$DEBIAN_DIR" "$FILES_DIR" "$SYSTEMD_DIR" "$DIST_DIR"

# Get source
if [ -n "$REPO_PATH" ] && [ -d "$REPO_PATH" ]; then
  echo "Copying source from local path: $REPO_PATH"
  rsync -a --delete "$REPO_PATH/" "$FILES_DIR/"
else
  echo "Cloning source from $REPO_URL"
  git clone --depth 1 "$REPO_URL" "${BUILD_DIR}/src"
  rsync -a --delete "${BUILD_DIR}/src/" "$FILES_DIR/"
fi

# Ensure package has an entrypoint (adjust if your server file is different)
# We'll assume server entry is server/index.js
if [ ! -f "${FILES_DIR}/server/index.js" ]; then
  echo "Warning: expected server/index.js not found in source. Please adjust build script to match your project layout."
fi

# Create a default .env (installer will create one; admin should update later)
cat > "${FILES_DIR}/.env" <<'ENV'
# Auto-generated by installer. Change secrets after install.
MASTER_KEY=master_secret_local
JWT_SECRET=jwt_secret_local
PORT=3000
ENV

# Create a simple wrapper script to start the server
mkdir -p "${FILES_DIR}/scripts"
cat > "${FILES_DIR}/scripts/start-server.sh" <<'SH'
#!/usr/bin/env bash
set -e
APP_DIR="$(dirname "$(dirname "$0")")"
cd "$APP_DIR"
# Ensure node_modules present
if [ ! -d node_modules ]; then
  echo "node_modules not found - running npm install (may take a while)..."
  npm install --production || true
fi
# Export env from .env if present
if [ -f .env ]; then
  set -o allexport
  # shellcheck disable=SC1090
  source .env
  set +o allexport
fi
# Start the app (adjust if your app uses another start command)
node server/index.js
SH
chmod +x "${FILES_DIR}/scripts/start-server.sh"

# Create systemd service file
cat > "${SYSTEMD_DIR}/${SERVICE_NAME}" <<SERVICE
[Unit]
Description=Christina Mini local server
After=network.target

[Service]
Type=simple
User=christina
Group=christina
WorkingDirectory=${INSTALL_PREFIX}
ExecStart=/usr/bin/env bash ${INSTALL_PREFIX}/scripts/start-server.sh
Restart=on-failure
RestartSec=5
Environment=NODE_ENV=production

[Install]
WantedBy=multi-user.target
SERVICE

# DEBIAN control file
cat > "${DEBIAN_DIR}/control" <<CONTROL
Package: ${PACKAGE_NAME}
Version: ${VERSION}
Section: web
Priority: optional
Architecture: all
Depends: nodejs (>= 18)
Maintainer: ${MAINTAINER}
Description: ${DESCRIPTION}
CONTROL

# postinst: runs after package installed
cat > "${DEBIAN_DIR}/postinst" <<'POSTINST'
#!/bin/bash
set -e
# create christina user if not exists
if ! id -u christina >/dev/null 2>&1; then
  useradd --system --home /opt/christina-mini --shell /usr/sbin/nologin christina || true
fi

# Ensure install dir present
mkdir -p /opt/christina-mini
chown -R christina:christina /opt/christina-mini

# Install Node.js if not present (non-interactive)
if ! command -v node >/dev/null 2>&1 || ! command -v npm >/dev/null 2>&1; then
  echo "Node.js not found - installing Node 20.x from NodeSource"
  # fetch setup script and run it
  curl -fsSL '"${NODE_VERSION_SETUP_URL}"' -o /tmp/nodesetup.sh
  bash /tmp/nodesetup.sh
  apt-get update
  apt-get install -y nodejs
fi

# Run npm install as christina user
cd /opt/christina-mini
# allow some retries in case of transient network issues
for i in 1 2 3; do
  su -s /bin/bash -c "cd /opt/christina-mini && npm install --production" christina && break || sleep 2
done

# enable & start systemd service
systemctl daemon-reload
systemctl enable --now christina-mini.service || true

# Set permissions
chown -R christina:christina /opt/christina-mini

# Print helpful info
echo "Christina Mini installed to /opt/christina-mini"
echo "Config file: /opt/christina-mini/.env"
echo "Use: sudo systemctl status christina-mini"
POSTINST
chmod 0755 "${DEBIAN_DIR}/postinst"

# prerm: stop the service before removal
cat > "${DEBIAN_DIR}/prerm" <<'PRERM'
#!/bin/bash
set -e
if systemctl --quiet is-active christina-mini; then
  systemctl stop christina-mini || true
fi
systemctl disable --now christina-mini || true
PRERM
chmod 0755 "${DEBIAN_DIR}/prerm"

# postrm: cleanup user (optional - here we won't delete data)
cat > "${DEBIAN_DIR}/postrm" <<'POSTRM'
#!/bin/bash
set -e
systemctl daemon-reload
POSTRM
chmod 0755 "${DEBIAN_DIR}/postrm"

# Set ownership and permissions inside package
# Ensure files owned by root inside package (dpkg will set real owners on install)
find "${BUILD_DIR}" -type d -print0 | xargs -0 chmod 0755 || true
find "${BUILD_DIR}" -type f -print0 | xargs -0 chmod 0644 || true
chmod 0755 "${FILES_DIR}/scripts/start-server.sh"
chmod 0644 "${SYSTEMD_DIR}/${SERVICE_NAME}"

# Build the .deb
PKGFILE="${DIST_DIR}/${PACKAGE_NAME}_${VERSION}_all.deb"
echo "Building package ${PKGFILE} ..."
dpkg-deb --build "$BUILD_DIR" "$PKGFILE"

echo "Package created: $PKGFILE"
echo "Install with: sudo dpkg -i $PKGFILE"