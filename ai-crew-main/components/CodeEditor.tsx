import React from 'react';
import type { GeneratedFile } from '../types';
import { CodeIcon, DownloadIcon } from './icons';
import { useMission } from '../context/MissionContext';
import { TextEditor } from './editors/TextEditor';
import { ImageEditor } from './editors/ImageEditor';
import { VideoPlayer } from './editors/VideoPlayer';
import { PdfViewer } from './editors/PdfViewer';
import { WordProcessor } from './editors/WordProcessor';

interface FileViewerProps {
  onContentChange: (filename: string, newContent: string) => void;
}

const isTextFile = (mimeType: string, filename: string) => 
    mimeType.startsWith('text/') || 
    ['application/json', 'application/javascript', 'application/xml', 'application/typescript'].includes(mimeType) ||
    !mimeType || // Treat unknown types as text
    filename.endsWith('.md') || filename.endsWith('.txt');

const isPdfFile = (mimeType: string, filename: string) =>
    mimeType === 'application/pdf' || filename.endsWith('.pdf');

const isWordFile = (mimeType: string, filename: string) =>
    mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' || filename.endsWith('.docx');

export const FileViewer: React.FC<FileViewerProps> = ({ onContentChange }) => {
    const { activeFile } = useMission();

    if (!activeFile) {
        return (
            <div className="h-full flex flex-col items-center justify-center text-gray-500">
                <div className="w-16 h-16 mb-4"><CodeIcon /></div>
                <p className="text-lg">Select a file to view its content</p>
                <p className="text-sm">Files generated by the crew will appear in the panel above.</p>
            </div>
        );
    }

    const renderContent = () => {
        const { mimeType, content, filename } = activeFile;
        
        if (mimeType.startsWith('image/')) {
            return <ImageEditor file={activeFile} onContentChange={onContentChange} />;
        }
        
        if (mimeType.startsWith('video/')) {
            return <VideoPlayer file={activeFile} />;
        }
        
        if (isPdfFile(mimeType, filename)) {
            return <PdfViewer file={activeFile} />;
        }
        
        if (isWordFile(mimeType, filename)) {
            return <WordProcessor file={activeFile} onSave={onContentChange} />;
        }
        
        if (isTextFile(mimeType, filename)) {
            return <TextEditor file={activeFile} onSave={onContentChange} />;
        }

        return (
            <div className="flex flex-col items-center justify-center h-full text-gray-400 p-4">
                <p className="text-lg mb-2">Preview not available for this file type.</p>
                <p className="text-sm text-gray-500 mb-4">({filename} - {mimeType})</p>
                <a 
                    href={content} 
                    download={filename}
                    className="flex items-center gap-2 px-4 py-2 text-sm bg-cyan-600 hover:bg-cyan-500 rounded-md transition-colors"
                >
                    <DownloadIcon />
                    Download File
                </a>
            </div>
        );
    };

    return (
        <div className="flex-grow flex flex-col h-full overflow-hidden">
            {renderContent()}
        </div>
    );
};
